using System;
using System.Collections.Generic;
using System.IO;
using System.Text.RegularExpressions;
using UnityEditor;
using UnityEngine;

namespace DTI.SourceControl
{
    public class FileStatus
    {
        public Status Status;
        public String FullPath;
        public String Name;
        public String Extension;
        public String RelativePath;
        public bool Commit;

        public FileStatus(string line)
        {
            var regex = new Regex("^([?!DAMC][ ]+)(?<path>[^ ].*)$");
                var match = regex.Match(line);
                if (match.Success)
                {
                    var path = match.Groups["path"].Value;
                    SetStatus(line);
                    FullPath = path;
                    RelativePath = path.Substring(Path.GetDirectoryName(Application.dataPath).Length);
                    Name = Path.GetFileName(path);
                    Extension = Path.GetExtension(Name);
                }
        }

        private void SetStatus(String line)
        {
            switch (line[0])
            {
                case '?':
                    Status = Status.NotUnderVC;
                    break;
                case '!':
                    Status = Status.Missing;
                    break;
                case 'D':
                    Status = Status.Deleted;
                    break;
                case 'A':
                    Status = Status.Added;
                    break;
                case 'M':
                    Status = Status.Modified;
                    break;
                case 'C':
                    Status = Status.Conflicted;
                    break;
            }
        }

        public static List<FileStatus> UpdateList(List<FileStatus> dst, List<FileStatus> src)
        {
            for (int i = 0; i < dst.Count; i++)
            {
                foreach (var fileStatus in src)
                {
                    if (fileStatus.FullPath.Equals(dst[i].FullPath))
                    {
                        dst[i].Status = fileStatus.Status;
                        break;
                    }
                }
            }
            return dst;
        }
    }
}