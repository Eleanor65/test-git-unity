using System;
using System.IO;
using UnityEditor;
using UnityEngine;
using System.Collections;

namespace DTI.SourceControl.Svn
{
    public class SvnOptionsWindow : EditorWindow
    {
        private const int BUTTONWIDTH = 70;

        private string _svnPath;
        private string _login;
        private string _password;

        private void OnGUI()
        {
            EditorGUILayout.LabelField("Path to svn.exe");
            GUILayout.BeginHorizontal();
            _svnPath = EditorGUILayout.TextField(_svnPath);
            if (GUILayout.Button("Choose", GUILayout.Width(BUTTONWIDTH)))
            {
                _svnPath = EditorUtility.OpenFolderPanel("Choose folder with svn.exe", @"C:\Program Files\TortoiseSVN\bin", "");
            }
            GUILayout.EndHorizontal();
            EditorGUILayout.Space();

            EditorGUILayout.LabelField("Login");
            _login = EditorGUILayout.TextField(_login);
            EditorGUILayout.Space();

            EditorGUILayout.LabelField("Password");
            _password = EditorGUILayout.TextField(_password);
            EditorGUILayout.Space();

            if (GUILayout.Button("Save", GUILayout.Width(BUTTONWIDTH)))
            {
                SaveOptions();
                this.Close();
            }
        }

        public void LoadOptions()
        {
            _svnPath = EditorPrefs.GetString(PrefsKeys.SVNPATHKEY);
            _login = EditorPrefs.GetString(PrefsKeys.LOGINKEY);
            _password = EditorPrefs.GetString(PrefsKeys.PASSWORDKEY);
        }

        private void SaveOptions()
        {
            if (!String.IsNullOrEmpty(_svnPath) && Directory.Exists(_svnPath))
            {
                EditorPrefs.SetString(PrefsKeys.SVNPATHKEY, _svnPath);
            }
            else
            {
                EditorUtility.DisplayDialog("Invalid path!", "This path is invalid! Please, choose correct path", "OK");
                return;
            }

            if (!String.IsNullOrEmpty(_login))
                EditorPrefs.SetString(PrefsKeys.LOGINKEY, _login);
            else
                EditorPrefs.DeleteKey(PrefsKeys.LOGINKEY);

            if (!String.IsNullOrEmpty(_password))
                EditorPrefs.SetString(PrefsKeys.PASSWORDKEY, _password);
            else
                EditorPrefs.DeleteKey(PrefsKeys.PASSWORDKEY);

            EditorUtility.DisplayDialog("Success!", "Options were successfully saved.", "OK");
        }
    }
}