using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using DTI.SourceControl.ConsoleTools;
using DTI.SourceControl.Svn;
using UnityEditor;
using UnityEngine;
using System.Collections;
using Object = UnityEngine.Object;

namespace DTI.SourceControl
{
    public class SourceControlMenu
    {
        [MenuItem("DTI/Source Control/Svn/Options")]
        public static void ShowSvnOptionsWindow()
        {
            var window = EditorWindow.GetWindow<SvnOptionsWindow>("Svn Options");
            window.LoadOptions();
            window.Show();
        }

        [MenuItem("DTI/Source Control/Svn/Update")]
        public static void SvnUpdate()
        {
            var manager = new SvnManager();
            var path = Path.GetDirectoryName(Application.dataPath);
            manager.UpdateAll(path);
        }

        [MenuItem("DTI/Source Control/Svn/Commit")]
        public static void Commit()
        {
            var selected = GetSelectedAssetPaths();
            var statusList = GetStatus(selected);
            var window = EditorWindow.GetWindow<SvnCommitWindow>("Commit");
            window.StatusList = statusList;
            window.Show();
        }

        private static List<FileStatus> GetStatus(String[] paths)
        {
            var manager = new SvnManager();
            return manager.GetStatus(paths);
        }

        private static String[] GetSelectedAssetPaths()
        {
            var paths = Selection.assetGUIDs.Select(x => AssetDatabase.GUIDToAssetPath(x)).ToList();
            var assets = paths.Select(x => AssetDatabase.LoadAssetAtPath<Object>(x)).ToList();

            var folders = assets.Where(x => x is DefaultAsset);
            assets = assets.Where(x => !(x is DefaultAsset)).ToList();
            foreach (var folder in folders)
                assets.AddRange(GetAssetsInFolder(folder));

            var log = String.Join("\n", assets.Select(x => String.Format("{0} {1}", x.name, x.GetType())).ToArray());
            Debug.Log(log);
            
            paths = EditorUtility.CollectDependencies(assets.ToArray()).Select(x => AssetDatabase.GetAssetPath(x)).ToList();

            if (assets.Any(x => x is SceneAsset))
                paths = paths.Where(x => AssetDatabase.LoadAssetAtPath<Object>(x) != null).ToList();

            paths = paths.Distinct().ToList();
            var meta = paths.Where(x => File.Exists(x + ".meta")).Select(x => x + ".meta").ToList();
            paths.AddRange(meta);
            paths = paths.Select(x => Path.Combine(Path.GetDirectoryName(Application.dataPath), x)).ToList();

            log = String.Join("\n", paths.ToArray());
            Debug.Log(log);

            return paths.ToArray();
        }

        private static Object[] GetAssetsInFolder(Object folder)
        {
            
            return new Object[0];
        }
    }
}