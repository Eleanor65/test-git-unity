using System;
using System.Collections.Generic;
using System.Linq;
using UnityEditor;
using UnityEngine;

namespace DTI.SourceControl.Svn
{
    public class SvnCommitWindow : EditorWindow
    {
        private const int BUTTONWIDTH = 70;

        private Vector2 _scrollPos;
        private String _message;
        private bool _commitAll;
        public List<FileStatus> StatusList;

        private bool CommitAll
        {
            get { return _commitAll; }
            set
            {
                if (_commitAll != value)
                {
                    _commitAll = value;
                    StatusList = StatusList.Select(x =>
                    {
                        if (x.Commit != value)
                            x.Commit = value;
                        return x;
                    }).ToList();
                }
            }
        }

        private void OnGUI()
        {
            GUILayout.Label("Message:");
            _message = EditorGUILayout.TextArea(_message);
            _scrollPos = EditorGUILayout.BeginScrollView(_scrollPos);
            if (StatusList.Count == 0)
            {
                EditorGUILayout.LabelField("Nothing to commit.");
            }
            else
            {
                GUILayout.BeginHorizontal();
                ShowCommitValues();
                ShowStatus();
                ShowName();
                ShowExtension();
                ShowPath();
                GUILayout.EndHorizontal();
            }
            EditorGUILayout.EndScrollView();

            GUILayout.BeginHorizontal();
            EditorGUI.BeginDisabledGroup(StatusList.All(x => !(x.Commit)));
            if (GUILayout.Button("Commit", GUILayout.Width(BUTTONWIDTH)))
            {
                var commitList = StatusList.Where(x => x.Commit);
                if (commitList.Any(x => x.Status == Status.Conflicted))
                {
                    EditorUtility.DisplayDialog("Can't commit!",
                        String.Format(
                            "Conflicted files have been chosen for commit. Please, resolve coflicts before commit.\n\nConflicted files:\n{0}",
                            String.Join("\n",
                                commitList.Where(x => x.Status == Status.Conflicted)
                                    .Select(x => x.RelativePath)
                                    .ToArray())), "Ok");
                }
                else
                {
                    var svnManager = new SvnManager();
                    svnManager.AddDeleteCommit(commitList, _message ?? String.Empty);
                    this.Close();
                }
            }
            EditorGUI.EndDisabledGroup();
            if (GUILayout.Button("Cancel", GUILayout.Width(BUTTONWIDTH)))
                this.Close();
            GUILayout.EndHorizontal();
        }

        private void ShowCommitValues()
        {
            GUILayout.BeginVertical();
            GUILayout.Space(5);
            CommitAll = EditorGUILayout.Toggle(CommitAll);
            for (int i = 0; i < StatusList.Count; i++)
            {
                StatusList[i].Commit = EditorGUILayout.Toggle(StatusList[i].Commit);
            }
            GUILayout.EndVertical();
        }

        private void ShowStatus()
        {
            GUILayout.BeginVertical();
            if (GUILayout.Button("Status"))
                StatusList = StatusList.OrderBy(x => x.Status).ToList();
            foreach (FileStatus status in StatusList)
                EditorGUILayout.LabelField(status.Status.ToString());
            GUILayout.EndVertical();
        }

        private void ShowName()
        {
            GUILayout.BeginVertical();
            if (GUILayout.Button("Name"))
                StatusList = StatusList.OrderBy(x => x.Name).ToList();
            foreach (FileStatus status in StatusList)
                EditorGUILayout.LabelField(status.Name);
            GUILayout.EndVertical();
        }

        private void ShowExtension()
        {
            GUILayout.BeginVertical();
            if (GUILayout.Button("Extension"))
                StatusList = StatusList.OrderBy(x => x.Extension).ToList();
            foreach (FileStatus status in StatusList)
                EditorGUILayout.LabelField(status.Extension);
            GUILayout.EndVertical();
        }

        private void ShowPath()
        {
            GUILayout.BeginVertical();
            if (GUILayout.Button("Path"))
                StatusList = StatusList.OrderBy(x => x.RelativePath).ToList();
            foreach (FileStatus status in StatusList)
                EditorGUILayout.LabelField(status.RelativePath);
            GUILayout.EndVertical();
        }
    }
}